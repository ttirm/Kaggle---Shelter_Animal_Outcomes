fit <- lm(mpg ~ wt, data = mtcars)
fit4 <- update(fit, mpg ~ wt + cyl)
fit6 <- update(fit, mpg ~ wt + cyl + vs)
anova(fit, fit4, fit6)
fit <- lm(mpg ~ wt, data = mtcars)
fit4 <- update(fit, mpg ~ wt + cyl)
fit6 <- update(fit, mpg ~ wt + cyl + carb)
anova(fit, fit4, fit6)
plot(fit6)
cov(mtcars, use="complete.obs")
cov(mtcars, use="complete.obs")
cor(mtcars, use="complete.obs")
fit <- lm(mpg ~ wt, data = mtcars)
fit4 <- update(fit, mpg ~ wt + am)
fit6 <- update(fit, mpg ~ wt + am + gear)
anova(fit, fit4, fit6)
plot(mtcars$mpg)
boxplot(mtcars$cyl, mtcars$mpg)
boxplot(mtcars$mpg, mtcars$cyl)
mtcars$cyl
boxplot(mtcars$mpg, facto(mtcars$cyl))
boxplot(mtcars$mpg, factor(mtcars$cyl))
boxplot(factor(mtcars$cyl), mtcars$mpg)
plot(factor(mtcars$cyl), mtcars$mpg)
plot(mtcars$mpg, col = mtcars$wt)
plot(mtcars$mpg, col = mtcars$cyl)
plot(mtcars$mpg, col = mtcars$disp)
plot(factor(mtcars$cyl), mtcars$mpg)
plot(factor(mtcars$cyl), mtcars$mpg, col = factor(mtcars$cyl))
plot(factor(mtcars$cyl), mtcars$mpg, col = mtcars$cyl)
plot(mtcars$mpg,factor(mtcars$cyl),  col = mtcars$cyl)
mtcars$mpg,
plot(factor(mtcars$cyl), mtcars$mpg, col = mtcars$cyl)
mtcars$cyl
plot(factor(mtcars$cyl), mtcars$mpg, col = factor(mtcars$cyl))
plot(factor(mtcars$cyl), mtcars$mpg, col = blue)
plot(factor(mtcars$cyl), mtcars$mpg, col = "blue")
plot(factor(mtcars$cyl), mtcars$mpg, col = "blue")
title("Cenas")
plot(factor(mtcars$wt), mtcars$mpg)
plot(factor(mtcars$wt), mtcars$mpg, col = factor(mtcars$cyl))
hist(mtcars$mpg)
plot( mtcars$mpg~mtcars$wt)
plot( mtcars$mpg~mtcars$wt, col = factor(mtcars$cyl))
plot( mtcars$mpg~mtcars$wt, col = factor(mtcars$disp))
cor(mtcars, use="complete.obs" )
fit <- lm(mpg ~ wt, data = mtcars)
fit4 <- update(fit, mpg ~ wt + cyl)
fit6 <- update(fit, mpg ~ wt + cyl + disp)
anova(fit, fit4, fit6)
fit <- lm(mpg ~ wt, data = mtcars)
fit4 <- update(fit, mpg ~ wt + disp)
fit6 <- update(fit, mpg ~ wt + disp + cyl)
anova(fit, fit4, fit6)
summary(fit)
summary(fit4)
fit <- lm(mpg ~ wt, data = mtcars)
fit4 <- update(fit, mpg ~ wt + cyl)
fit6 <- update(fit, mpg ~ wt + cyl + carb)
anova(fit, fit4, fit6)
plot(fit6)
summary(fit6)
fit <- lm(mpg ~ wt, data = mtcars)
fit4 <- update(fit, mpg ~ wt + cyl)
fit6 <- update(fit, mpg ~ wt + cyl + carb)
anova(fit, fit4, fit6)
fit <- lm(mpg ~ wt, data = mtcars)
fit4 <- update(fit, mpg ~ wt + cyl)
fit6 <- update(fit, mpg ~ wt + cyl + carb)
anova(fit, fit4, fit6)
fit <- lm(mpg ~ wt, data = mtcars)
summary(fit)
anova(fit)
cor(mtcars, use="complete.obs" )
```{r}
fit <- lm(mpg ~ wt, data = mtcars)
fit4 <- update(fit, mpg ~ wt + cyl)
anova(fit, fit4)
```
fit <- lm(mpg ~ wt, data = mtcars)
fit4 <- update(fit, mpg ~ wt + cyl)
anova(fit, fit4)
pairs(mtcars)
fit <- lm(mpg ~ wt, data = mtcars)
fit4 <- update(fit, mpg ~ wt + cyl)
fit6 <- update(fit, mpg ~ wt + cyl + disp)
fit8 <- update(fit, mpg ~ wt + cyl + am)
fit10 <- update(fit, mpg ~ wt + cyl + carb)
fit12 <- update(fit, mpg ~ wt + cyl + drat)
anova(fit, fit4, fit6, fit8, fit10, fit12)
fit <- lm(mpg ~ wt, data = mtcars)
fit4 <- update(fit, mpg ~ wt + cyl)
fit6 <- update(fit, mpg ~ wt + cyl + disp)
fit8 <- update(fit, mpg ~ wt + cyl + am)
fit10 <- update(fit, mpg ~ wt + cyl + carb)
fit12 <- update(fit, mpg ~ wt + cyl + gear)
anova(fit, fit4, fit6, fit8, fit10, fit12)
fit <- lm(mpg ~ wt, data = mtcars)
fit4 <- update(fit, mpg ~ wt + cyl)
fit6 <- update(fit, mpg ~ wt + cyl + disp)
fit8 <- update(fit, mpg ~ wt + cyl + am)
fit10 <- update(fit, mpg ~ wt + cyl + carb)
fit12 <- update(fit, mpg ~ wt + cyl + hp)
anova(fit, fit4, fit6, fit8, fit10, fit12)
fit <- lm(mpg ~ wt, data = mtcars)
fit4 <- update(fit, mpg ~ wt + cyl)
fit12 <- update(fit, mpg ~ wt + cyl + hp)
anova(fit, fit4, fit6, fit8, fit10, fit12)
fit <- lm(mpg ~ wt, data = mtcars)
fit4 <- update(fit, mpg ~ wt + cyl)
fit6 <- update(fit, mpg ~ wt + cyl + hp)
anova(fit, fit4, fit6)
cor(mtcars, use="complete.obs" )
fit <- lm(mpg ~ wt, data = mtcars)
fit4 <- update(fit, mpg ~ wt + cyl)
fit6 <- update(fit, mpg ~ wt + cyl + disp)
anova(fit, fit4, fit6)
cor(mtcars, use="complete.obs" )
fit <- lm(mpg ~ wt, data = mtcars)
fit4 <- update(fit, mpg ~ wt + cyl)
fit6 <- update(fit, mpg ~ wt + cyl + disp)
anova(fit, fit4, fit6)
fit <- lm(mpg ~ wt, data = mtcars)
fit4 <- update(fit, mpg ~ wt + am)
fit6 <- update(fit, mpg ~ wt + am + gear)
anova(fit, fit4, fit6)
cor(mtcars, use="complete.obs" )
fit <- lm(mpg ~ wt, data = mtcars)
fit4 <- update(fit, mpg ~ wt + cyl)
fit6 <- update(fit, mpg ~ .)
anova(fit, fit4, fit6)
fit <- lm(mpg ~ ., data = mtcars)
anova(fit)
fit <- lm(mpg ~ wt, data = mtcars)
fit4 <- update(fit, mpg ~ cyl + wt)
fit6 <- update(fit, mpg ~ cyl + wt + hp)
anova(fit, fit4, fit6)
fit <- lm(mpg ~ wt, data = mtcars)
fit4 <- update(fit, mpg ~ wt + cyl)
fit6 <- update(fit, mpg ~ wt + cyl + hp)
anova(fit, fit4, fit6)
fit <- lm(mpg ~ ., data = mtcars)
summary(fit)
fit <- lm(mpg ~ wt, data = mtcars)
fit4 <- update(fit, mpg ~ wt + cyl)
fit6 <- update(fit, mpg ~ wt + cyl + hp)
anova(fit, fit4, fit6)
fit <- lm(mpg ~ ., data = mtcars)
summary(fit)
anova(fit, fit4)
anova(fit4, fit )
par(mfrow = c(2,2))
plot(fit4)
mtcars$gear
?mtcars
plot( mtcars$mpg~mtcars$am, col = factor(mtcars$cyl))
plot( mtcars$mpg~mtcars$wt, col = factor(mtcars$am))
boxplot(factor(mtcars$am), mtcars$mpg)
library(ggplot2)
ggplot(mtcars, aes(x=am, y=mpg))+geom_boxplot()
ggplot(mtcars, aes(x=factor(am), y=mpg))+geom_boxplot()
ggplot(mtcars, aes(x=factor(am), y=mpg, fill = am))+geom_boxplot()
mtcars$am
?mtcars
ggplot(mtcars, aes(x=factor(am), y=mpg, fill = am))+geom_boxplot()
plot( mtcars$mpg~mtcars$wt, col = factor(mtcars$am))
par(mfrow=c(1,1))
plot( mtcars$mpg~mtcars$wt, col = factor(mtcars$am))
fit <- glm(mpg ~ am, data = mtcars)
summary(fit)
fit <- lm(mpg ~ am, data = mtcars)
summary(fit)
fit <- glm(mpg ~ am, data = mtcars, family = )
summary(fit)
fit2 <- glm(mpg ~ am + wt, data = mtcars, family = )
summary(fit)
anova(fit, fit2)
anova(fit, fit2, test = "Chisq")
fit <- glm(mpg ~ am, data = mtcars, family = )
summary(fit)
fit2 <- glm(mpg ~ am + wt, data = mtcars, family = )
summary(fit)
fit2 <- glm(mpg ~ am + wt + cyl, data = mtcars, family = )
summary(fit)
anova(fit, fit2, fit3, test = "Chisq")
fit <- glm(mpg ~ am, data = mtcars, family = )
summary(fit)
fit2 <- glm(mpg ~ am + wt, data = mtcars, family = )
summary(fit2)
fit3 <- glm(mpg ~ am + wt + cyl, data = mtcars, family = )
summary(fit3)
anova(fit, fit2, fit3, test = "Chisq")
summary(fit3)
mtcars$am
head(mtcars)
boxplot(mpg~am, data = mtcars)
boxplot(mpg~am, data = mtcars, xlab = "Transmition", ylab = "Miles per Gallon", main = "Comparisson MPG per AM")
boxplot(mpg~am, data = mtcars,
xlab = "Transmition",
ylab = "Miles per Gallon",
main = "Comparisson MPG per AM",
col = "blue")
mean(mtcars[,mtcars$am == 1])
mean(mtcars[mtcars$am == 1,])
mean(mtcars[mtcars$am == "1",])
mean(mtcars[mtcars$am == "Automatic",])
mtcars$am
mtcars[mtcars$am == 1,]
mean(mtcars[mtcars$am == 1,mpg])
mean(mtcars[mtcars$am == 1,mtcars$mpg])
mtcars[mtcars$am == 1,mtcars$mpg]
mtcars$mpg
mtcars[mtcars$am == 1,mtcars$mpg]
mean(mtcars[mtcars$am == 1,1])
mean(mtcars[mtcars$am == 0,1])
fit <- lm(mpg ~ am, data = mtcars)
summary(fit)
fit <- lm(mpg ~ am, data = mtcars)
fit4 <- update(fit, mpg ~ am + wt)
fit4 <- update(fit, mpg ~ am + wt + cyl)
anova(fit, fit2, fit4)
fit <- lm(mpg ~ am, data = mtcars)
fit2 <- update(fit, mpg ~ am + wt)
fit4 <- update(fit, mpg ~ am + wt + cyl)
anova(fit, fit2, fit4)
summary(fit4)
cor(mtcars, use="complete.obs" )
par(mfrow = c(2,2))
plot(fit4)
fit <- lm(mpg ~ am, data = mtcars)
fit2 <- update(fit, mpg ~ am + wt)
fit4 <- update(fit, mpg ~ am + wt + cyl)
anova(fit, fit2, fit4)
summary(fit4)
```{rref.label= "cor", eval=FALSE}
```{r ref.label= "cor", eval=FALSE}
cor(mtcars, use="complete.obs" )
```{r ref.label= "cor", eval=FALSE}
```{r ref.label= "box", eval=FALSE}
```{r box, echo=FALSE, include=FALSE}
rep(1, 5)
library(Quandl)
install.packages("Quandl")
library(Quandl)
IT <- Quandl('USER_1KR/1KT', start_date = '2008-01-01', end_date = '2012-12-31')
IT <- Quandl("USER_1KR/1KT", start_date = '2008-01-01', end_date = '2012-12-31')
IT
IT <-Quandl('USER_1KR/1KT', start_date = '2008-01-01', end_date = '2012-12-31')
library(Quandl)
IT <- Quandl('USER_1KR/1KT', start_date = '2008-01-01', end_date = '2012-12-31')
Quandl.search('IT stocks', page = 1, source = NULL, silent = FALSE, authcode = Quandl.auth(Qtoken))
IT <- Quandl('WIKI', start_date = '2008-01-01', end_date = '2012-12-31')
IT <- Quandl('WIKI/GOOG', start_date = '2008-01-01', end_date = '2012-12-31')
IT <- Quandl("WIKI/GOOG", start_date = '2008-01-01', end_date = '2012-12-31')
IT <- Quandl("NSE/OIL", start_date = '2008-01-01', end_date = '2012-12-31')
dim(IT)
IT <- Quandl("LSE", start_date = '2008-01-01', end_date = '2012-12-31')
IT <- Quandl("SEC", start_date = '2008-01-01', end_date = '2012-12-31')
IT <- Quandl("WIKI/GOOG", start_date = '2008-01-01', end_date = '2012-12-31')
IT <- Quandl("WIKI/GOOGL", start_date = '2008-01-01', end_date = '2012-12-31')
dim(IT)
str(IT)
IT1 <- IT[,"Close"]
IT1
assets <- IT1
tail(assets,-1)
tail(assets,-1)
return <- log(tail(assets,-1)/head(assets, -1))
Q <- rbind(cov(return), rep(1, ncol(assets)), colMeans(return))
Q <- rbind(cov(return), rep(1, ncol(assets)), colMeans(return))
Q <- rbind(cov(return), rep(1, ncol(assets)), colMeans(return))
G <- Quandl("GOOG/NASDAQ_GOOG", start_date = '2009-06-01', end_date = '2013-16-01')
G <- Quandl("GOOG/NASDAQ_GOOG", start_date = '2009-06-01', end_date = '2013-16-01')
library(AppliedPredictiveModeling)
load(AppliedPredictiveModeling)
load(caret)
install.packages("Caret")
install.packages("caret")
load(caret)
load(caret)
load("caret")
install.packages("caret")
library("caret")
library(AppliedPredictiveModeling)
load(AppliedPredictiveModeling)
#Animal Sherter Outcome
#setwd("C:/Users/tiago_000/Documents/GitHub/Kaggle - Shelter_Animal_Outcomes")
setwd("C:/Users/QSR/Documents/GitHub/Kaggle---Shelter_Animal_Outcomes")
library(caret)
library(RANN)
train <- read.csv("./data/train.csv", na.strings = c("", "Unknown"))
str(train)
train$SexuponOutcome <- as.character(train$SexuponOutcome)
sum(is.na(train$SexuponOutcome))
#Distinguish animals with and without name
train$Hasname <- !is.na(train$Name)
head(train)
isna <- apply(train, 2, function(x){sum(is.na(x))})
#impute strategy - sex
unique(train$SexuponOutcome)
table(train$SexuponOutcome)
table(train$OutcomeSubtype, train$OutcomeType)
#Most of the animals with name have been neutered
table(train$Hasname, train$SexuponOutcome)
#table(train$MultiCol, train$SexuponOutcome)
#Create Name table
#.....................
t <- train[which(!is.na(train$SexuponOutcome) & train$Hasname == TRUE),]
res <- apply(as.matrix(t$SexuponOutcome), 1, function(x) {grepl("Male", x)})
t$Sex <- as.data.frame(res)$res
length(t$Sex)
length(t$Name)
tab <- as.matrix(table(t$Name, t$Sex))
head(tab)
ds <- data.frame(names = row.names(tab), male = tab[,2] > tab[,1])
#.........................
#Impute function to define sex
#......................................
impute1 <- function(x, ds){
index <-grep(paste0("^",trimws(as.character(x)),"$"), ds$names)
if(length(index) == 0){
sex0 <- sample(c("Male", "Female"),1, replace = TRUE, prob = c(0.5,0.5))
int <- "Intact"
#print(index)
}else{
if(ds[as.numeric(index),2] == TRUE){
sex0 <- "Male"
int <- "Neutered"
}else if(ds[as.numeric(index),2] == FALSE){
sex0 <- "Female"
int <- "Neutered"
}
}
result <- paste(int, sex0)
}
t1 <- train[is.na(train$SexuponOutcome),]
res <-sapply(t1$Name, impute1, ds = ds)
train[is.na(train$SexuponOutcome),"SexuponOutcome"] <- unlist(res)
#There is no NAs in SexuponOutcome
sum(is.na(train$SexuponOutcome))
#Create two new columns; one for Male/Female; One for Intact/Neutered
res <- apply(as.matrix(train$SexuponOutcome), 1, function(x) {grepl("Male", x)})
train$Sex <- as.data.frame(res)$res
head(train$Sex)
res <- apply(as.matrix(train$SexuponOutcome), 1, function(x) {grepl("Intact", x)})
train$Intact <- as.data.frame(res)$res
head(train)
#Distinguish animals with just one color
res <- apply(as.matrix(train$Color), 1, function(x) {grepl("/", x)})
train$MultiCol <- as.data.frame(res)$res
head(train)
#Distinguish pure bred animals from mixed bred animals
res <- apply(as.matrix(train$Breed), 1, function(x) {!grepl("/|Mix", x)})
train$Pure <- as.data.frame(res)$res
head(train)
table(train$Pure, train$OutcomeType)
#Subtype evalutation
str(train$OutcomeSubtype)
summary(train$OutcomeSubtype)
# More than 50% of the results don't have an outcome sub type
sum(is.na(train$OutcomeSubtype))/length(train$OutcomeSubtype)*100
values <- train$AgeuponOutcome[!is.na(train$AgeuponOutcome)]
res <- apply(as.matrix(values), 1, function(x) {trimws(substr(x, grep("[0-9] ", x)+2, nchar(as.character(x))))})
mult <- substr(res, grep(" ", res)+1, nchar(as.character(res)))
unique(res)
mult_times <- function(x){
if(x == "year" || x == "years"){
mult <- 365
}else if (x == "month" || x == "months"){
mult <- 30
}else if (x == "week" || x == "weeks"){
mult <- 7
}else if (x == "day" || x == "days"){
mult <- 1
}
}
mult <- sapply(res, mult_times)
res <- apply(as.matrix(values), 1, function(x) {trimws(substr(x, grep("[0-9]", x), grep(" ", x)))})
#num <- substr(res, grep("[0-9]", x), grep(" ", x))
num <- as.numeric(res)
num[num == 0] <- 0.5
train$Days[!is.na(train$AgeuponOutcome)] <- num*mult
sum(is.na(train$AgeuponOutcome))
nam <- names(!is.na(train$AgeuponOutcome))
vec <-c(6,7,8,9,10,11,12,13,14,15,16)
preObj <- preProcess(train[,vec], method = "knnImpute")
train1 <- predict(preObj, train[,vec])
install.packages("RANN")
setwd("C:/Users/QSR/Documents/GitHub/Kaggle---Shelter_Animal_Outcomes")
library(caret)
library(RANN)
train <- read.csv("./data/train.csv", na.strings = c("", "Unknown"))
str(train)
train$SexuponOutcome <- as.character(train$SexuponOutcome)
sum(is.na(train$SexuponOutcome))
#Distinguish animals with and without name
train$Hasname <- !is.na(train$Name)
head(train)
isna <- apply(train, 2, function(x){sum(is.na(x))})
#impute strategy - sex
unique(train$SexuponOutcome)
table(train$SexuponOutcome)
table(train$OutcomeSubtype, train$OutcomeType)
#Most of the animals with name have been neutered
table(train$Hasname, train$SexuponOutcome)
#table(train$MultiCol, train$SexuponOutcome)
#Create Name table
#.....................
t <- train[which(!is.na(train$SexuponOutcome) & train$Hasname == TRUE),]
res <- apply(as.matrix(t$SexuponOutcome), 1, function(x) {grepl("Male", x)})
t$Sex <- as.data.frame(res)$res
length(t$Sex)
length(t$Name)
tab <- as.matrix(table(t$Name, t$Sex))
head(tab)
ds <- data.frame(names = row.names(tab), male = tab[,2] > tab[,1])
#.........................
#Impute function to define sex
#......................................
impute1 <- function(x, ds){
index <-grep(paste0("^",trimws(as.character(x)),"$"), ds$names)
if(length(index) == 0){
sex0 <- sample(c("Male", "Female"),1, replace = TRUE, prob = c(0.5,0.5))
int <- "Intact"
#print(index)
}else{
if(ds[as.numeric(index),2] == TRUE){
sex0 <- "Male"
int <- "Neutered"
}else if(ds[as.numeric(index),2] == FALSE){
sex0 <- "Female"
int <- "Neutered"
}
}
result <- paste(int, sex0)
}
t1 <- train[is.na(train$SexuponOutcome),]
res <-sapply(t1$Name, impute1, ds = ds)
train[is.na(train$SexuponOutcome),"SexuponOutcome"] <- unlist(res)
#There is no NAs in SexuponOutcome
sum(is.na(train$SexuponOutcome))
#Create two new columns; one for Male/Female; One for Intact/Neutered
res <- apply(as.matrix(train$SexuponOutcome), 1, function(x) {grepl("Male", x)})
train$Sex <- as.data.frame(res)$res
head(train$Sex)
res <- apply(as.matrix(train$SexuponOutcome), 1, function(x) {grepl("Intact", x)})
train$Intact <- as.data.frame(res)$res
head(train)
#Distinguish animals with just one color
res <- apply(as.matrix(train$Color), 1, function(x) {grepl("/", x)})
train$MultiCol <- as.data.frame(res)$res
head(train)
#Distinguish pure bred animals from mixed bred animals
res <- apply(as.matrix(train$Breed), 1, function(x) {!grepl("/|Mix", x)})
train$Pure <- as.data.frame(res)$res
head(train)
table(train$Pure, train$OutcomeType)
#Subtype evalutation
str(train$OutcomeSubtype)
summary(train$OutcomeSubtype)
# More than 50% of the results don't have an outcome sub type
sum(is.na(train$OutcomeSubtype))/length(train$OutcomeSubtype)*100
values <- train$AgeuponOutcome[!is.na(train$AgeuponOutcome)]
res <- apply(as.matrix(values), 1, function(x) {trimws(substr(x, grep("[0-9] ", x)+2, nchar(as.character(x))))})
res
unique(res)
mult_times <- function(x){
if(x == "year" || x == "years"){
mult <- 365
}else if (x == "month" || x == "months"){
mult <- 30
}else if (x == "week" || x == "weeks"){
mult <- 7
}else if (x == "day" || x == "days"){
mult <- 1
}
}
mult <- sapply(res, mult_times)
res <- apply(as.matrix(values), 1, function(x) {trimws(substr(x, grep("[0-9]", x), grep(" ", x)))})
#num <- substr(res, grep("[0-9]", x), grep(" ", x))
num <- as.numeric(res)
num[num == 0] <- 0.5
train$Days[!is.na(train$AgeuponOutcome)] <- num*mult
sum(is.na(train$AgeuponOutcome))
nam <- names(!is.na(train$AgeuponOutcome))
vec <-c(6,7,8,9,10,11,12,13,14,15,16)
preObj <- preProcess(train[,vec], method = "knnImpute")
train1 <- predict(preObj, train[,vec])
train1$Days <- predict(preObj, train[,vec])$Days
train[,vec]
nam <- names(!is.na(train$AgeuponOutcome))
nam
!is.na(train$AgeuponOutcome)
nam <- names(train)
nam
vec <-c(6,11,12,13,14,15,16)
train[,vec]
table(train[,vec])
table(sum(is.na(train[,vec])))
isna <- apply(train, 2, function(x){sum(is.na(x))})
isna <- apply(train[,vec], 2, function(x){sum(is.na(x))})
isna
preObj <- preProcess(train[,vec], method = "knnImpute")
train1$Days <- predict(preObj, train[,vec])$Days
train$Days <- predict(preObj, train[,vec])$Days
train$Days[is.na(train$Days)]
mean(train$Days)
mean(train$Days, na.rm = TRUE)
round(mean(train$Days, na.rm = TRUE),1)
train$Days[is.na(train$Days)] <- round(mean(train$Days, na.rm = TRUE),1)
isna <- apply(train[,vec], 2, function(x){sum(is.na(x))})
isna
